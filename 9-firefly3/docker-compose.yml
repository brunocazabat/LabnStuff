##### GENERATED START #####
# Define the custom bridge network for communication between services.
networks:
    bridge_network:
        name: bridge_network
        driver: bridge # Use the bridge network driver for service communication.

# Order: defaults_values, image, container_name, depends_on, environment, ports, volumes, healthcheck
x-defaults: &defaults_values
    restart: unless-stopped # Automatically restart the container unless manually stopped.
    env_file: .env # Load additional environment variables from a .env file.
    privileged: false # Do not run the container in privileged mode.
    security_opt:
        - no-new-privileges:true
    environment:
        TZ: Europe/Berlin # Set the application timezone.
        PUID: ${PUID} # Set the user ID for file permissions using an environment variable.
        PGID: ${PGID} # Set the group ID for file permissions using an environment variable.
        DISABLE_IPV6: ${DISABLE_IPV6} # Optionally disable IPv6 support using an environment variable.
    logging: # Configure log rotation to prevent excessive disk usage.
        driver: local # Use the default local logging driver.
        options:
            max-size: "20m" # Limit individual log file size to 20MB.
            max-file: "5" # Keep a maximum of 5 log files.
            compress: "true" # Compress log files to save disk space.
    networks: [bridge_network] # Attach the container to the custom network.

services:
    # Watchtower service to automatically update containers when new versions of their images are available.
    watchtower:
        <<: *defaults_values
        image: containrrr/watchtower # The official Watchtower image.
        container_name: watchtower # Name the container "watchtower" for easier identification.
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:rw # Mount the Docker socket to allow Watchtower to interact with the Docker daemon.
        command:
            --cleanup --interval 86400 # Configure Watchtower:
            # --cleanup: Remove old images after updates.
            # --interval 86400: Check for updates every 24 hours (86400 seconds).
    ##### GENERATED END #####

    ##### SERVICES START ##### ADD YOUR SERVICES BELOW #####
    firefly_iii_core:
        <<: *defaults_values
        image: fireflyiii/core:latest
        container_name: firefly_iii_core
        depends_on:
            - db
        ports:
            - "3001:8080"
        volumes:
            - firefly_iii_upload:/var/www/html/storage/upload:rw
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s

    db:
        <<: *defaults_values
        image: mariadb:lts
        container_name: firefly_iii_db
        volumes:
            - firefly_iii_db:/var/lib/mysql:rw
        healthcheck:
            test: ["CMD", "mysql", "-u", "root", "-e", "SELECT 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s

    cron:
        <<: *defaults_values
        image: alpine
        container_name: firefly_iii_cron
        command: sh -c "
            apk add tzdata
            && ln -s /usr/share/zoneinfo/${TZ} /etc/localtime
            | echo \"0 3 * * * wget -qO- http://app:8080/api/v1/cron/$STATIC_CRON_TOKEN;echo\"
            | crontab -
            && crond -f -L /dev/stdout"

volumes:
    firefly_iii_upload:
    firefly_iii_db:
